CREATE DATABASE defensa_hito4;
USE defensa_hito4;

DROP DATABASE defensa_hito4;

CREATE TABLE proyecto (
    id_proy INT PRIMARY KEY NOT NULL,
    nombreProy TEXT,
    tipoProy TEXT
);

CREATE TABLE departamento (
    id_dep INT PRIMARY KEY NOT NULL,
    nombre TEXT
);

CREATE TABLE persona (
    id_per INT PRIMARY KEY NOT NULL,
    nombre TEXT NOT NULL,
    apellidos TEXT NOT NULL,
    fecha_nac DATE NOT NULL,
    edad INT NOT NULL,
    email TEXT NOT NULL,
    sexo CHAR NOT NULL,
    id_dep INT NOT NULL,
    id_prov INT NOT NULL,
    FOREIGN KEY (id_dep) REFERENCES departamento(id_dep)
);


CREATE TABLE detalle_proyecto (
    id_do INT PRIMARY KEY NOT NULL,
    id_per INT NOT NULL,
    id_proy INT NOT NULL,
    FOREIGN KEY (id_per) REFERENCES persona(id_per),
    FOREIGN KEY (id_proy) REFERENCES proyecto(id_proy)
);


CREATE TABLE provincia (
    id_prov INT NOT NULL,
    nombre TEXT,
    id_dep INT NOT NULL,
    FOREIGN KEY (id_dep) REFERENCES departamento(id_dep)
);



#Crear 3 Trigger para hacer un evento de Insert,Update y Delete cada vez que se modifique un registro (nombre del proyecto) de la tabla proyectos se tiene que almacenar en la tabla audit_proyectos los siguientes
#nombre_proy_anterior= el valor antes de la modificacion
#nombre_proy_posterior = el valor despues de la modificacion
#operation = UPDATE(After) OR DELETE(After) OR INSERT(before)

CREATE TABLE auidit_proyectos(
        nombre_proy_anterior VARCHAR(100),
        nombre_proy_posterior VARCHAR(100),
        tipo_proy_anterior VARCHAR(100),
        tipo_proy_posterior VARCHAR(100),
        operation VARCHAR(100),
        userId VARCHAR(100),
        hostname VARCHAR(100),
        fecha VARCHAR(100)
);


create trigger tr_auditotia_proyecto_insert
    before insert
    on proyecto
    for each row
    begin
        insert into auidit_proyectos(nombre_proy_anterior, nombre_proy_posterior, tipo_proy_anterior, tipo_proy_posterior, operation, userid, hostname, fecha)
            select 'No existe valor previo - insert', new.nombreProy, 'No existe valor previo - insert', new.tipoProy, 'INSERT',user(), @@hostname, now();
    end;


create trigger tr_auditotia_proyecto_update
    before update
    on proyecto
    for each row
    begin
        insert into auidit_proyectos(nombre_proy_anterior, nombre_proy_posterior, tipo_proy_anterior, tipo_proy_posterior, operation, userid, hostname, fecha)
            select old.nombreProy, new.nombreProy, old.tipoProy, new.tipoProy, 'UPDATE',user(), @@hostname, now();
    end;


create trigger tr_auditotia_proyecto_delete
    before delete
    on proyecto
    for each row
    begin
        insert into auidit_proyectos(nombre_proy_anterior, nombre_proy_posterior, tipo_proy_anterior, tipo_proy_posterior, operation, userid, hostname, fecha)
            select old.nombreProy , 'No existe valor posterior - DELETE', old.tipoProy, 'No existe valor posterior - DELETE', 'DELETE',user(), @@hostname, now();
    end;

INSERT INTO proyecto (id_proy, nombreProy, tipoProy) VALUES (1, 'Proyecto A', 'Tipo A');

SELECT * FROM auidit_proyectos;*/


#Crear una vista de nombre reporte_proyectos, la vista tendra los siguientes campos(fullname(nombre y apellido),
# desc_proyecto(dela tabla proyecto en tipo proyecto),departamento(el nombre de la tabla departamento), codigo_dep(dentro de codigo_dep muestra los codigos de cada
# departamento es decir; si es La Paz = LPZ, Cochabamba=CBB, El Alto=EAT))



CREATE VIEW reporte_proyectos_v3 AS
SELECT CONCAT(persona.nombre, ' ', persona.apellidos) AS fullname,
       CONCAT(proyecto.nombreProy, ':', proyecto.tipoProy) AS desc_proyecto,
       departamento.nombre AS departamento,
       CASE departamento.nombre
           WHEN 'La Paz' THEN 'LPZ'
           WHEN 'Cochabamba' THEN 'CBB'
           WHEN 'El Alto' THEN 'EAT'
           ELSE 'Cod no identificado'
       END AS codigo_dep
FROM proyecto
JOIN detalle_proyecto ON proyecto.id_proy = detalle_proyecto.id_proy
JOIN persona ON detalle_proyecto.id_per = persona.id_per
JOIN departamento ON persona.id_dep = departamento.id_dep;


#Insertar un proyecto
INSERT INTO proyecto (id_proy, nombreProy, tipoProy) VALUES (1, 'Plantacion de Arboles', 'Forestacion');

#Insertar un departamento
INSERT INTO departamento (id_dep, nombre) VALUES (1, 'La Paz');

#Insertar una persona
INSERT INTO persona (id_per, nombre, apellidos, fecha_nac, edad, email, sexo, id_dep, id_prov)
VALUES (1, 'Wilmer', 'Cori', '1990-01-01', 23, 'wil@correo.com', 'M', 1, 1);

#Insertar un detalle de proyecto
INSERT INTO detalle_proyecto (id_do, id_per, id_proy) VALUES (1, 1, 1);


SELECT * FROM reporte_proyectos_v3;



#crear un trigger para la talbla proyectos , el trigger debe de evitar que se inserte en la tabla siempre y cuando  el tipo de forestacion  si el dias es miercoles o el mes es julio, mostrar un mensaje de error: NO SE ADMITE INSERCION DE TIPO FORESTACION

CREATE OR REPLACE TRIGGER miercolesjulio
BEFORE INSERT ON proyecto
FOR EACH ROW
BEGIN
    IF NEW.tipoProy = 'Forestación' AND (DAYOFWEEK(CURRENT_DATE) = 4 and MONTH(CURRENT_DATE) = 6) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'NO SE ADMITE INSERCIÓN DE TIPO FORESTACIÓN';
    END IF;
END ;

INSERT INTO proyecto (id_proy, nombreProy, tipoProy) VALUES (1, 'Forestacion', 'Forestación');


INSERT INTO proyecto (id_proy, nombreProy, tipoProy) VALUES (3, 'Tortugas', 'por las tortugas');


#crear una funcion, recibira un parametro del dia de la semana Sunday, Monday, tuesday y el resto de dias de la semana y devolvera Lunes, martes, miercoles, etc. segun el dia que se ingrese el dia que devuelva en espa;ol


CREATE OR REPLACE FUNCTION traductor(dia_semana VARCHAR(10))
RETURNS VARCHAR(10)
BEGIN
    DECLARE dia_esp VARCHAR(100);

    CASE dia_semana
        WHEN 'Sunday' THEN SET dia_esp = 'Domingo';
        WHEN 'Monday' THEN SET dia_esp = 'Lunes';
        WHEN 'Tuesday' THEN SET dia_esp = 'Martes';
        WHEN 'Wednesday' THEN SET dia_esp = 'Miércoles';
        WHEN 'Thursday' THEN SET dia_esp = 'Jueves';
        WHEN 'Friday' THEN SET dia_esp = 'Viernes';
        WHEN 'Saturday' THEN SET dia_esp = 'Sábado';
        ELSE SET dia_esp = 'Desconocido';
    END CASE;

    RETURN dia_esp;
END ;

SELECT traductor('Sunday');
SELECT traductor('Monday');
SELECT traductor('Tuesday');
SELECT traductor('Wednesday');
SELECT traductor('Thursday');
SELECT traductor('Friday');
